package entities

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"strings"
	"text/template"

	"gopkg.in/yaml.v1"
)

var (
	defaultVarType = "string"

	workspaceTemplate = `// DO NOT EDIT (this file is automatically generated)
	resource "tfe_workspace" "{{ .Metadata.ID }}" {
		organization = "{{ .Metadata.Organization }}"
		name         = "{{ .Metadata.Name }}"
	}
	
	// variable declarations:
	{{ with .Spec.Resources.Vars }}
	{{ range . }}variable "{{ $.Metadata.ID }}_var_{{ .Name }}" {}
	resource "tfe_variable" "{{ $.Metadata.ID }}_var_{{ .Name }}" {
		workspace_id = tfe_workspace.{{ $.Metadata.ID }}.id
		key          = "{{ .Name }}"
		value        = var.{{ $.Metadata.ID }}_var_{{ .Name }}
		category     = "terraform"
	}
	
	{{ end }}{{ end }}
	
	// env variable declarations:
	{{ with .Spec.Resources.Env }}
	{{ range . }}variable "{{ $.Metadata.ID }}_env_{{ .Name | ToLower }}" {}
	resource "tfe_variable" "{{ $.Metadata.ID }}_env_{{ .Name | ToLower }}" {
		workspace_id = tfe_workspace.{{ $.Metadata.ID }}.id
		key          = "{{ .Name }}"
		value        = var.{{ $.Metadata.ID }}_env_{{ .Name | ToLower }}
		category     = "env"{{ if .Sensitive }}
		sensitive    = true{{ end }}
	}
	
	{{ end }}{{ end }}`

	varsTemplate = `// DO NOT EDIT (this file is automatically generated)
	// variable values:
	{{ with .Spec.Resources.Vars }}
	{{ range . }}{{ $.Metadata.ID }}_var_{{ .Name }} = {{ .Val }}
	{{ end }}{{ end }}
	
	// env variable values:
	{{ with .Spec.Resources.Env }}
	{{ range . }}{{ $.Metadata.ID }}_env_{{ .Name | ToLower }} = {{ .Val }}
	{{ end }}{{ end }}`
)

// Workspace is a Terraform Workspace
type Workspace struct {
	Kind string

	Metadata struct {
		Name         string
		ID           string
		Shortname    string
		Organization string
	}
	Spec struct {
		Resources struct {
			Vars []Variable
			Env  []Variable
		}
	}
}

type Variable struct {
	Name      string
	Type      string
	Val       string
	Sensitive bool
}

// NewWorkspace creates a new Workspace from an input yaml file and returns a pointer to it
func NewWorkspace(file string) *Workspace {

	data, err := ioutil.ReadFile(file)
	if err != nil {
		log.Fatalf(err.Error())
	}

	w := Workspace{}

	// unmarshal our input file yaml to the struct
	err = yaml.Unmarshal([]byte(data), &w)
	if err != nil {
		log.Fatalf(err.Error())
	}

	w.Spec.Resources.Vars = initVarMap(w.Spec.Resources.Vars)
	w.Spec.Resources.Env = initVarMap(w.Spec.Resources.Env)

	return &w
}

// Output a workspace to destination files
func (w *Workspace) Output(outputDir string) {

	d := fmt.Sprintf("%s/workspace.tf", outputDir)
	s := fmt.Sprintf("%s/workspace.auto.tfvars", outputDir)

	// subsitute values
	w.substitute()

	funcMap := template.FuncMap{
		"ToLower": strings.ToLower,
	}

	// create the Terraform stanza's
	wt, err := template.New("workspace").Funcs(funcMap).Parse(workspaceTemplate)
	if err != nil {
		log.Fatalf(err.Error())
	}

	wo := bytes.Buffer{}
	err = wt.Execute(&wo, w)
	if err != nil {
		log.Fatalf(err.Error())
	}

	err = ioutil.WriteFile(d, wo.Bytes(), 0644)
	if err != nil {
		log.Fatalf(err.Error())
	}

	// create the secret values
	vt, err := template.New("vars").Funcs(funcMap).Parse(varsTemplate)
	if err != nil {
		log.Fatalf(err.Error())
	}

	so := bytes.Buffer{}
	err = vt.Execute(&so, w)
	if err != nil {
		log.Fatalf(err.Error())
	}

	err = ioutil.WriteFile(s, so.Bytes(), 0644)
	if err != nil {
		log.Fatalf(err.Error())
	}
}

// initialise variables (can be normal terraform variables of environment variables)
func initVarMap(vars []Variable) []Variable {
	for i, v := range vars {
		if v.Type == "" {
			vars[i].Type = defaultVarType
		}
	}
	return vars
}

// substitute var/env values so they're in the struct and available to the templates
func (w *Workspace) substitute() {
	for i, t := range w.Spec.Resources.Vars {
		if t.Val == "" {
			w.Spec.Resources.Vars[i].Val = "subs"
		}
		if t.Type == "string" {
			w.Spec.Resources.Vars[i].Val = fmt.Sprintf("\"%s\"", t.Val)
		}
	}
	for i, t := range w.Spec.Resources.Env {
		if t.Val == "" {
			w.Spec.Resources.Env[i].Val = "subs"
		}
		if t.Type == "string" {
			w.Spec.Resources.Env[i].Val = fmt.Sprintf("\"%s\"", t.Val)
		}
	}
}
